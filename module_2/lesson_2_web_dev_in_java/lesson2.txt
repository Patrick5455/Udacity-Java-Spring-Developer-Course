
    HTTP Request/Response: HTTP, or HyperTextTransferProtocol, is a binary data format for communication between programs over the web. It can be broken down into two basic message types: requests and responses. Clients send requests for resources to servers, which respond with the requested data. Read more about the protocol here.
    HTTP GET and POST: Every HTTP request has an important header that determines its method. GET and POST are two of the most common; GET indicates a request for data from the server, and POST represents a request to "post" new data to the server - this usually represents some action on server data like submitting search terms, posting an update, or adding new data to the server.

\When building a web application, there are a lot of helpful tools that can solve common problems for you. How do you decide what you need to implement a given feature?

Since we're going to be building web apps with Java and Spring boot, the first step is to research what Spring supports and recommends for that feature. Spring's website includes documentation and examples for a wide range of features and libraries, and is a great place to start. Once you've decided on a library to use, the next step is finding its website and documentation. Most open-source libraries have extensive documentation that covers getting started, usage examples, and complete references. You can use these resources to implement your feature and debug issues along the way. Finally, if you encounter issues that documentation alone can't solve, you should search Google for to find similar issues and solutions others have encountered.

Thatâ€™s right. Your Application Server manages as many Servlets as needed to receive HTTP requests. It can instantiate, call, and destroy Servlet instances. Spring does something similar with dependencies you define.

Spring provides a lot of additional features that can help us receive requests and create responses. What are some things Spring can help us do?

    Use templates to generate webpages as responses to HTTP requests

    Manage security contexts and authenticate requests

    Route HTTP requests to specific application code

    Inject object instances into services that need to use them

